Very Very Basic algorithm
(no boolean operators or parenthesis yet)
Try tracing it for different expressions, I think it works for all arithmetic cases

I assume we have an operator(stack1) and operand(stack2) stack as Zack posted earlier.

1.loop through the expression
	a. add operand, operator, operand to appropriate stack.
	b. before adding another operator, check the precedence. If the operator about to be added has a lower precedence, 
	   than the operator in the top of the stack, compute expressions in the stacks until we encounter an operator that has equal or 
	   lower precedence than the current operator.
		i. to compute each expression, save the top operand to var1 and pop, save and pop the operand, save and pop
		   the second operand to var2.
		ii. compute the expression as var2 operand var1 (has to be done in this order since some operators
		    are not commutative i.e 2^3 is not 3^2).
		iii. put the result back in the stack and continue computing expressions until operator stack is empty.
	c.if an opening parenthesis is encountered, add it to the operator stack
	d.if a closing parenthesis is encountered, compute all expressions as in bi - biii until the opening parens is enocuntered
2. When done looping through expression, compute everything in the stacks, as in steps b.i thru b.iii
3. Now do one last pop and save on the operand stack, this is the result.

ZACK: For parentheses I think we can just throw them onto the operator stack when we encounter an opening paren, and then when we encounter
a closed paren we pop until we get to the open paren and keep going. I think that would be the simplist way to do the parentheses. I think we
should just do the boolean operators the same as we do the arithmetic operators. Because I think it will work the same way, if you find
a !2 and it goes into the compute function it will just return 0 because that would be false, and as long as we update the is_bool variable
we can know that the answer will have to be converted to true or false e.g. 0 = false, anything else = 1.

Jim 9-17: I think that will work for the parenthesis.  Also I tweaked the algorithm slightly.  Instead of evaluating ALL expressions when we compare 
operators, evaluate expressions until we encounter an operator that is of the same or lower precendence than the current operator.  I tried this for
a few of the cases that were incorrect before.  I falsely assumed that + had a greater precedence than -.  I'll try to fix the code later tonight (Saturday)
or tomorrow.




int evaluate_infix(expression){
	
	declare iter at beginning of expression

	while(iter != expression.end()){

		get a character, get more characters if the operand is more than 1 digit,throw an error if its not an operator or operand, 
		skip whitespace, etc.

		if(the character is an operator && the stack1 is NOT empty){

			if(precedence of current operator is lower than precedence of top() operator in stack1){
				while(current operator precedence is lower than operator on top of operator stack){
					//save and pop the first operand
					int var1 = stack2.top();
					stack2.pop()

					//save and pop the operand
					char oper = stack1.top();
					stack1.pop();

					//save and pop the second operand
					char var2 = stack2.top()
					stack2.pop();

					//add the result back to the operand stack
					//the operands must be passed in this order to account for noncommutativity
					stack2.push(compute(var2,var1,oper));
			else{
				stack1.push(operator);
			}
		else{
			stack2.push(operand);
		}
		increment to next character;
	}
	
	//at this point we're done with the expression, we can compute the remaining things in the stacks as before in the nested while loop.
	//When we're done with that, the result will be in stack2, and we'll know its the result since there wont be any operators in stack1
	//this might be inefficient since we'll be repeating code but for now we have the basic idea.
	
	//return the result of the expression
	return stack2.pop();
}
int compute(int o1, int o2, char operator){
	use switch statement to match up char operators with the actual operators
	switch(operator)
		case '*':
		return o1*o2;
}
	
